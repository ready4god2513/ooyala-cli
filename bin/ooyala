#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'ooyala'
require 'pp'
require 'yaml'

rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/ooyala` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/ooyala now"
  exit 64
end

include GLI::App

program_desc 'Connect to the Ooyala API with simple commands'

version Ooyala::VERSION

desc 'Ooyala API Key'
arg_name 'api_key'
flag [:k,:key], default_value: Ooyala::Config.fetch('key')

desc 'Ooyala API Secret'
arg_name 'api_secret'
flag [:s,:secret], default_value: Ooyala::Config.fetch('secret')

pre do |global,command,options,args|
  $ooyala = Ooyala::API.new(global[:key], global[:secret])
end

desc 'Add a live stream'
command :live do |c|

  c.desc 'Add encodings to the stream'
  c.flag [:e, :encodings], default_value: Ooyala::Config.fetch('encodings')

  c.desc 'Set the name of the stream (will be shown in the player)'
  c.flag [:n, :name], default_value: Ooyala::Config.fetch('stream')

  c.desc 'Set the password for the stream (set this on the encoder as well)'
  c.flag [:p, :password], default_value: Ooyala::Config.fetch('streampw')

  c.action do |global_options, options, args|
    puts "---Provisioning your stream----"
    stream = Ooyala::LiveStream.new($ooyala, {name: options[:name], password: options[:password]})
    stream.encodings = options[:encodings]
    PP.pp stream.publish
  end
end

desc 'Store a configuration setting to be used next time.

  Options are:
  
  key
  secret
  encodings
  stream
  streampw
'
command :config do |c|

  c.desc 'Config Name'
  c.flag [:n, :name]
  c.flag [:v, :value]

  c.action do |global_options, options, args|
    Ooyala::Config.set(options[:name], options[:value])
  end
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  puts exception
  PP.pp exception.backtrace
  true
end

exit run(ARGV)
